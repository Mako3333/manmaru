# 食事解析APIの完全解説

## 1. 全体の処理フロー

## 2. 主要コンポーネントの役割

### 2.1. クライアント側（page.tsx & api.ts）
- 食事の写真を撮影/選択
- 画像をBase64エンコードして/api/analyze-mealエンドポイントに送信

### 2.2. APIエンドポイント（route.ts）
- リクエストからBase64画像と食事タイプを取得
- Gemini AIモデルを使用して画像から食品を検出
- 栄養素計算を実行
- 結果をJSON形式でクライアントに返却

### 2.3. AI統合（langchain.ts）
- Gemini Vision APIとの連携を処理
- 画像とテキストプロンプトを組み合わせたマルチモーダルメッセージを作成

### 2.4. 栄養素計算（calculateNutrition関数）
- 検出された食品リストをローカルの栄養データベースと照合
- 量を考慮して栄養素を計算
- 信頼度スコアを算出

## 3. コードの詳細解説

### 3.1. リクエストの受信と検証
- クライアントから送信されたJSONデータを解析
- APIキーと画像データの存在を検証
- エラーがあればJSON形式でエラー情報を返却

### 3.2. Gemini AIモデルの設定
- Gemini 2.0 Flashモデルを使用 (最新の高性能生成AIモデル)
- 温度を低く設定し、より一貫性のある結果を得る
- StructuredOutputParserを使って出力を構造化
- Zodスキーマ(DetectedFoodsSchema)を使用して出力を検証・型付け

### 3.3. AIへのプロンプト作成
- AIに対する詳細な指示を提供（ペルソナ設定、タスクの詳細など）
- Zodスキーマに基づいた出力形式をプロンプトに含める
- 食事タイプ（朝食/昼食/夕食/間食）をプロンプトに挿入

### 3.4. 画像解析の実行
- テキストプロンプトと画像を組み合わせたマルチモーダルメッセージを作成
- Gemini AIモデルにリクエストを送信
- 返却された結果をfoodParserで構造化（JSON文字列からJavaScriptオブジェクトに変換）

### 3.5. 栄養素計算
- 検出された食品リストをcalculateNutrition関数に渡して栄養計算
- 検出された食品リスト(foods)と計算された栄養データ(nutrition)をJSON形式でクライアントに返却

### 3.6. 栄養素計算の詳細
- ローカルデータベースの読み込み:
  - nutrition_data.jsonからJSON形式の栄養データを読み込み
  - データベース読み込み失敗時はエラーをキャッチして空配列を使用
- 食品名マッチング:
  - 食品名を正規化（小文字化、特殊文字削除、トリム）
  - 部分一致に基づいて最適なマッチングを検索
  - 名前の長さの差が最小のものを「最良のマッチ」として選択
- 量の変換:
  - estimateQuantityMultiplier関数を使用して量を変換
  - 例: 「茶碗1杯」と「茶碗1/2杯」のような相対量を数値に変換
- 栄養素の集計:
  - 各食品の栄養素を量に基づいて計算
  - マッチングがない場合はデフォルト値を使用（「推測」）
- 信頼度計算:
  - マッチした食品の割合に基づいて信頼度スコアを計算
  - 50%~95%の間で制限（完全に信頼しすぎないように）
- 値の丸め処理:
  - カロリー: 整数に丸め
  - タンパク質、鉄分: 小数点第1位まで
  - 葉酸、カルシウム: 整数に丸め

## 4. 技術的特徴

### 4.1. RAG (Retrieval Augmented Generation) 実装
- コメント「シンプルなRAG実装」にあるように、このシステムは非常にシンプルな形のRAG (検索拡張生成) を実装しています:
  - AI（Gemini）が食品を検出
  - ローカルデータベースから栄養情報を検索
  - 検索結果を使って最終的な栄養データを計算

### 4.2. エラー処理
- システムは複数のエラーケースを処理しています:
  - APIキー不足
  - 画像データ不足
  - AI解析エラー
  - 栄養データベース読み込みエラー
  - 栄養データマッチングエラー（デフォルト値を使用）

### 4.3. 処理の信頼性向上策
- 信頼性を向上させるために:
  - 食品名の正規化
  - 部分一致による柔軟なマッチング
  - 信頼度スコアの計算
  - 食品がデータベースに存在しない場合のフォールバック値

## 5. 将来の拡張ポイント
- コードのコメントから、将来の拡張が計画されていることが示唆されています:
  - より大規模な栄養データベースの採用
  - より精緻な食品マッチングアルゴリズム:
    - 現在は単純な名前の部分一致と長さ比較
    - より高度なテキスト類似度アルゴリズム（レーベンシュタイン距離、コサイン類似度など）が考えられる
  - データベースから見つからない食品の処理の改善:
    - 現在は固定的なデフォルト値を使用
    - 食品カテゴリや近似食品に基づいた推定値を使用する方法が考えられる

## 6. 全体的なアーキテクチャの評価
- このシステムは、AI+データベース（RAG）の組み合わせを用いた効果的な設計になっています:
  - モジュラー設計:
    - API処理
    - AI連携
    - データ処理
    - 栄養計算 が明確に分離されている
  - 堅牢なエラー処理:
    - 各段階でのエラーキャッチと適切な応答
  - スケーラビリティ:
    - ローカルJSONファイルから外部データベースに移行しやすい設計
  - 柔軟性:
    - モデル変更（例: Gemini-2.0-flashからVision Pro 2.0など）が容易

この過程のどこかで問題があり、エラーが発生している。
画像入力、テキストでの食事入力、どちらもエラーが発生している。

テキスト入力からの栄養素解析システム：技術引継レポート

1. システム概要
   本システムは、ユーザーが入力した食事内容（テキスト形式）から栄養素を計算する機能を実装しています。大まかな処理フローは以下の通りです：
   - ユーザーがテキストで食品と量を入力
   - AIを使って食品名と量を標準化・最適化
   - 標準化されたデータを使って栄養素を計算
   - 結果をデータベースに保存

2. 実装の主要コンポーネント
   2.1. フロントエンド（クライアント側）
       - ファイル: page.tsx
       - 主要機能:
         - handleSaveTextInput: テキスト入力を処理し保存する関数
         - enhanceFoodItems: AIを使って食品データを強化する関数
         - 食品入力フォームと保存ボタンのUI実装

   2.2. バックエンド API
       2.2.1. テキスト解析 API
           - ファイル: route.ts
           - 主要機能:
             - 受け取った食品リストをGemini AIを使って解析
             - 曖昧な表現（「少し」「一杯」など）を具体的な数値に変換
             - 標準化された食品名と量を返却

       2.2.2. 栄養計算 API
           - ファイル: route.ts
           - 主要機能:
             - 標準化された食品リストの栄養素を計算
             - 食品データベースとのマッチング処理
             - 合計栄養素の計算と値の丸め処理

   2.3. ユーティリティ
       - ファイル: nutritionUtils.ts
       - 主要機能:
         - 食品と栄養素のスキーマ定義
         - 量の変換関数（estimateQuantityMultiplier）

   2.4. AIモデル連携
       - ファイル: langchain.ts
       - 主要機能:
         - Gemini AIモデルとの連携処理
         - プロンプトとレスポンスの処理

3. 処理フローの詳細
   3.1. フロントエンド処理フロー

   3.2. テキスト解析処理フロー
       - 入力受信: ユーザーが入力した食品リストを受け取る
       - データ検証: Zod スキーマで入力データを検証
       - プロンプト生成: AIに指示するためのプロンプトを構築
       - AI解析: Gemini AIモデルに食品リストを送信
       - 応答処理: AIの応答をJSONとして解析
       - 結果返却: 強化された食品リストを返却

   3.3. 栄養計算処理フロー
       - 食品検索: 各食品をデータベースから検索
       - 量の変換: テキスト形式の量を数値倍率に変換
       - 栄養素計算: 基準値に倍率を掛けて栄養素を計算
       - 合計計算: 全食品の栄養素を合計
       - 信頼度計算: 計算の信頼度スコアを算出
       - 結果返却: 計算された栄養データを返却

4. 現在の問題点と解決策
   4.1. 確認された問題
       - エラーハンドリングの不足: 詳細なエラー情報が表示されていない
       - JSON解析の脆弱性: AIからの応答形式が一定でない場合の処理が不完全
       - テキスト入力のエラー: テキスト入力のエラーが発生している
