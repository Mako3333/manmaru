"use client";

import React, { useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Heart, Clock, Plus, ExternalLink, Trash } from 'lucide-react';
import { ClippedRecipe } from '@/types/recipe';
import { AddToMealDialog } from '@/components/recipes/add-to-meal-dialog';
import { toast } from 'sonner';
import { getNutrientDisplayName, getNutrientUnit } from '@/lib/nutrition-utils';
import { openOriginalSocialMedia } from '@/lib/utils/deep-link';

interface RecipeDetailClientProps {
    initialData: ClippedRecipe;
}

export default function RecipeDetailClient({ initialData }: RecipeDetailClientProps) {
    const [recipe, setRecipe] = useState<ClippedRecipe>(initialData);
    const [isFavorite, setIsFavorite] = useState<boolean>(recipe?.is_favorite || false);
    const [loading, setLoading] = useState<boolean>(false);
    const [showMealDialog, setShowMealDialog] = useState<boolean>(false);
    const [showDeleteDialog, setShowDeleteDialog] = useState<boolean>(false);
    const router = useRouter();
    const supabase = createClientComponentClient();

    // „ÇΩ„Éº„Ç∑„É£„É´„É°„Éá„Ç£„Ç¢„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
    const isSocialMedia = recipe.source_platform === 'Instagram' || recipe.source_platform === 'TikTok';

    // „ÅäÊ∞ó„Å´ÂÖ•„Çä„Éà„Ç∞„É´Âá¶ÁêÜ
    const handleFavoriteToggle = async () => {
        try {
            setLoading(true);
            const newFavoriteState = !isFavorite;

            // Ê•ΩË¶≥ÁöÑUIÊõ¥Êñ∞ÔºàÂç≥ÊôÇ„Å´Áä∂ÊÖã„ÇíÊõ¥Êñ∞Ôºâ
            setIsFavorite(newFavoriteState);
            setRecipe({ ...recipe, is_favorite: newFavoriteState });

            // API„É™„ÇØ„Ç®„Çπ„Éà
            const response = await fetch(`/api/recipes/${recipe.id}/favorite`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ is_favorite: newFavoriteState }),
            });

            if (!response.ok) {
                // API„É™„ÇØ„Ç®„Çπ„Éà„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØÂÖÉ„ÅÆÁä∂ÊÖã„Å´Êàª„Åô
                setIsFavorite(!newFavoriteState);
                setRecipe({ ...recipe, is_favorite: !newFavoriteState });
                throw new Error('„ÅäÊ∞ó„Å´ÂÖ•„ÇäË®≠ÂÆö„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('Failed to update favorite status:', error);
            toast?.error('„ÅäÊ∞ó„Å´ÂÖ•„ÇäË®≠ÂÆö„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        } finally {
            setLoading(false);
        }
    };

    // È£ü‰∫ãË®òÈå≤„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈñã„Åè
    const handleOpenMealDialog = () => {
        setShowMealDialog(true);
    };

    // È£ü‰∫ãË®òÈå≤„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈñâ„Åò„Çã
    const handleCloseMealDialog = () => {
        setShowMealDialog(false);
    };

    // ÂÖÉ„ÅÆ„É¨„Ç∑„Éî„ÇíÈñã„Åè
    const handleOpenOriginalRecipe = () => {
        if (isSocialMedia && recipe.content_id) {
            // „ÇΩ„Éº„Ç∑„É£„É´„É°„Éá„Ç£„Ç¢„ÅÆÂ†¥Âêà„ÅØ„Éá„Ç£„Éº„Éó„É™„É≥„ÇØ„Çí‰ΩøÁî®
            openOriginalSocialMedia(
                recipe.source_url,
                recipe.source_platform,
                recipe.content_id
            );
        } else {
            // ÈÄöÂ∏∏„ÅÆ„É¨„Ç∑„Éî„Çµ„Ç§„Éà„ÅÆÂ†¥Âêà„ÅØÊñ∞„Åó„ÅÑ„Çø„Éñ„ÅßÈñã„Åè
            window.open(recipe.source_url, '_blank');
        }
    };

    // „Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„ÉºËÉåÊôØËâ≤
    const getPlaceholderBgColor = () => {
        if (recipe.source_platform === 'Instagram') {
            return 'bg-gradient-to-tr from-purple-500 via-pink-600 to-orange-400';
        }
        if (recipe.source_platform === 'TikTok') {
            return 'bg-black';
        }
        return 'bg-gray-200';
    };

    // Ê≥®ÊÑè„É¨„Éô„É´„Å´Âü∫„Å•„Åè„Çπ„Çø„Ç§„É´„ÇØ„É©„Çπ„ÇíÂèñÂæó
    const getCautionStyleClass = () => {
        if (!recipe.caution_level) return '';
        if (recipe.caution_level === 'high') return 'bg-red-50 border-red-200 text-red-700';
        if (recipe.caution_level === 'medium') return 'bg-yellow-50 border-yellow-200 text-yellow-700';
        return '';
    };

    const handleDeleteRecipe = async () => {
        if (!recipe.id) return;

        setLoading(true);
        try {
            const response = await fetch(`/api/recipes/${recipe.id}`, {
                method: 'DELETE',
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '„É¨„Ç∑„Éî„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }

            // ÂâäÈô§ÊàêÂäüÂæå„ÄÅ„É¨„Ç∑„Éî‰∏ÄË¶ß„Éö„Éº„Ç∏„Å´Êàª„Çã
            router.push('/recipes');
            router.refresh();
        } catch (error) {
            console.error('ÂâäÈô§„Ç®„É©„Éº:', error);
            alert('„É¨„Ç∑„Éî„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
        } finally {
            setLoading(false);
            setShowDeleteDialog(false);
        }
    };

    const openDeleteDialog = () => {
        setShowDeleteDialog(true);
    };

    const closeDeleteDialog = () => {
        setShowDeleteDialog(false);
    };

    return (
        <div className="container max-w-4xl mx-auto px-4 py-6">
            {/* Êàª„Çã„Éú„Çø„É≥„Å®„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
            <div className="flex justify-between items-center mb-6">
                <Button variant="ghost" onClick={() => router.back()} className="flex items-center gap-1">
                    <ArrowLeft size={16} />
                    Êàª„Çã
                </Button>

                <div className="flex gap-2">
                    <Button
                        variant={isFavorite ? "default" : "outline"}
                        onClick={handleFavoriteToggle}
                        disabled={loading}
                        className={isFavorite ? "bg-red-500 hover:bg-red-600" : ""}
                    >
                        <Heart size={16} className="mr-1" fill={isFavorite ? "white" : "none"} />
                        {isFavorite ? "„ÅäÊ∞ó„Å´ÂÖ•„ÇäÊ∏à„Åø" : "„ÅäÊ∞ó„Å´ÂÖ•„Çä"}
                    </Button>

                    <Button variant="default" onClick={handleOpenMealDialog}>
                        <Plus size={16} className="mr-1" />
                        È£ü‰∫ãË®òÈå≤„Å´ËøΩÂä†
                    </Button>
                </div>
            </div>

            {/* „É¨„Ç∑„ÉîÊÉÖÂ†± */}
            <div className="bg-white rounded-xl shadow-sm overflow-hidden">
                {/* „É¨„Ç∑„ÉîÁîªÂÉè */}
                <div className="relative h-64 w-full">
                    {recipe.image_url ? (
                        <Image
                            src={recipe.image_url}
                            alt={recipe.title}
                            fill
                            className="object-cover"
                        />
                    ) : isSocialMedia ? (
                        // „ÇΩ„Éº„Ç∑„É£„É´„É°„Éá„Ç£„Ç¢„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº
                        <div className={`w-full h-full ${getPlaceholderBgColor()} flex items-center justify-center`}>
                            <div className="flex flex-col items-center p-4 text-white">
                                <div className="relative w-16 h-16 mb-3">
                                    <Image
                                        src={`/icons/${recipe.source_platform?.toLowerCase()}.svg`}
                                        alt={recipe.source_platform || ''}
                                        width={64}
                                        height={64}
                                        className="object-contain"
                                    />
                                </div>
                                <h3 className="text-xl font-semibold text-center">{recipe.title}</h3>
                                <p className="text-sm opacity-80 mt-1">{recipe.source_platform}„ÅÆ„É¨„Ç∑„Éî</p>
                            </div>
                        </div>
                    ) : (
                        <div className="w-full h-full bg-gray-100 flex items-center justify-center">
                            <span className="text-gray-400 text-4xl">üçΩÔ∏è</span>
                        </div>
                    )}

                    {/* „ÇΩ„Éº„Ç∑„É£„É´„É°„Éá„Ç£„Ç¢„Ç¢„Ç§„Ç≥„É≥ */}
                    {isSocialMedia && (
                        <div className="absolute top-4 right-4 bg-white rounded-full p-2 shadow-md">
                            {recipe.source_platform === 'Instagram' ? (
                                <svg className="w-6 h-6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <linearGradient id="instagramGradient" x1="0" y1="0" x2="1" y2="1">
                                        <stop offset="0%" stopColor="#FBCD07" />
                                        <stop offset="50%" stopColor="#E94E76" />
                                        <stop offset="100%" stopColor="#6B54D7" />
                                    </linearGradient>
                                    <path d="M12 2C14.717 2 15.056 2.01 16.122 2.06C17.187 2.11 17.912 2.277 18.55 2.525C19.21 2.779 19.766 3.123 20.322 3.678C20.8305 4.1779 21.224 4.78259 21.475 5.45C21.722 6.087 21.89 6.813 21.94 7.878C21.987 8.944 22 9.283 22 12C22 14.717 21.99 15.056 21.94 16.122C21.89 17.187 21.722 17.912 21.475 18.55C21.2247 19.2178 20.8311 19.8226 20.322 20.322C19.822 20.8303 19.2173 21.2238 18.55 21.475C17.913 21.722 17.187 21.89 16.122 21.94C15.056 21.987 14.717 22 12 22C9.283 22 8.944 21.99 7.878 21.94C6.813 21.89 6.088 21.722 5.45 21.475C4.78233 21.2245 4.17753 20.8309 3.678 20.322C3.16941 19.8222 2.77593 19.2175 2.525 18.55C2.277 17.913 2.11 17.187 2.06 16.122C2.013 15.056 2 14.717 2 12C2 9.283 2.01 8.944 2.06 7.878C2.11 6.812 2.277 6.088 2.525 5.45C2.77524 4.78218 3.1688 4.17732 3.678 3.678C4.17767 3.16923 4.78243 2.77573 5.45 2.525C6.088 2.277 6.812 2.11 7.878 2.06C8.944 2.013 9.283 2 12 2Z" stroke="url(#instagramGradient)" fill="url(#instagramGradient)" />
                                    <circle cx="12" cy="12" r="5" stroke="white" fill="none" strokeWidth="2" />
                                    <circle cx="17.5" cy="6.5" r="1.5" fill="white" />
                                </svg>
                            ) : (
                                <svg className="w-6 h-6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M19.321 5.562C18.7206 4.98345 17.8873 4.73633 16.714 4.73633H7.286C6.11267 4.73633 5.27867 4.98345 4.679 5.562C4.07933 6.14055 3.75 7.00973 3.75 8.14052V15.8587C3.75 16.9895 4.07933 17.859 4.679 18.4375C5.27867 19.0161 6.11267 19.2632 7.286 19.2632H16.714C17.8873 19.2632 18.7213 19.0161 19.321 18.4375C19.9207 17.859 20.25 16.9895 20.25 15.8587V8.14052C20.25 7.00973 19.9207 6.14055 19.321 5.562Z" fill="#FF0050" />
                                    <path d="M9.16797 15.8164V8.18262L16.1078 12.8383L9.16797 15.8164Z" fill="white" />
                                </svg>
                            )}
                        </div>
                    )}
                </div>

                {/* „É¨„Ç∑„ÉîË©≥Á¥∞ */}
                <div className="p-6">
                    <h1 className="text-2xl font-bold mb-2">{recipe.title}</h1>
                    <div className="flex flex-wrap gap-2 mb-4">
                        <span className="text-sm bg-blue-50 text-blue-700 px-2 py-1 rounded-full">
                            {recipe.recipe_type === 'main_dish' ? '‰∏ªËèú' :
                                recipe.recipe_type === 'side_dish' ? 'ÂâØËèú' :
                                    recipe.recipe_type === 'soup' ? 'Ê±ÅÁâ©' : '„Åù„ÅÆ‰ªñ'}
                        </span>
                        <span className="text-sm bg-gray-50 text-gray-700 px-2 py-1 rounded-full flex items-center">
                            <Clock size={14} className="mr-1" />
                            {recipe.source_platform || '„É¨„Ç∑„Éî„Çµ„Ç§„Éà'}
                        </span>
                    </div>

                    {/* Ê≥®ÊÑè‰∫ãÈ†ÖË°®Á§∫ */}
                    {recipe.caution_foods && recipe.caution_foods.length > 0 && (
                        <div className={`mb-6 p-4 rounded-lg border ${getCautionStyleClass()}`}>
                            <h3 className="font-semibold mb-2">
                                {recipe.caution_level === 'high' ? '‚ö†Ô∏è Ê≥®ÊÑè„ÅåÂøÖË¶Å„Å™È£üÊùê' :
                                    recipe.caution_level === 'medium' ? '‚ö†Ô∏è Ê≥®ÊÑè„Åó„ÅüÊñπ„ÅåËâØ„ÅÑÈ£üÊùê' :
                                        'ÂèÇËÄÉÊÉÖÂ†±'}
                            </h3>
                            <ul className="list-disc list-inside">
                                {recipe.caution_foods.map((food, index) => (
                                    <li key={index}>{food}</li>
                                ))}
                            </ul>
                        </div>
                    )}

                    {/* Ê†ÑÈ§äÁ¥†ÊÉÖÂ†± */}
                    <div className="mb-6">
                        <h2 className="text-lg font-semibold mb-3">Ê†ÑÈ§äÊàêÂàÜ</h2>
                        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                            {recipe.nutrition_per_serving && Object.entries(recipe.nutrition_per_serving)
                                .filter(([key]) => ['calories', 'protein', 'iron', 'folic_acid', 'calcium', 'vitamin_d'].includes(key))
                                .map(([key, value]) => (
                                    <div key={key} className="bg-gray-50 p-3 rounded-lg">
                                        <h3 className="text-sm text-gray-500">{getNutrientDisplayName(key)}</h3>
                                        <p className="text-lg font-semibold">
                                            {typeof value === 'number' ? value.toFixed(1) : value} {getNutrientUnit(key)}
                                        </p>
                                    </div>
                                ))
                            }
                        </div>
                    </div>

                    {/* ÊùêÊñô„É™„Çπ„Éà */}
                    <div className="mb-6">
                        <h2 className="text-lg font-semibold mb-3">ÊùêÊñô</h2>
                        <div className="bg-gray-50 p-4 rounded-lg">
                            {recipe.ingredients && recipe.ingredients.length > 0 ? (
                                <ul className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                                    {recipe.ingredients.map((ingredient, index) => (
                                        <li key={index} className="flex justify-between">
                                            <span>{ingredient.name}</span>
                                            <span className="text-gray-500">{ingredient.quantity || ''}</span>
                                        </li>
                                    ))}
                                </ul>
                            ) : (
                                <p className="text-gray-500">ÊùêÊñôÊÉÖÂ†±„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                            )}
                        </div>
                    </div>

                    {/* ÂÖÉ„Çµ„Ç§„Éà„Å∏„ÅÆ„É™„É≥„ÇØ„Å®„ÇØ„É™„ÉÉ„ÉóËß£Èô§„Éú„Çø„É≥ */}
                    <div className="mt-8 flex flex-col sm:flex-row gap-3">
                        <Button
                            variant="outline"
                            className="flex-1"
                            onClick={handleOpenOriginalRecipe}
                        >
                            <ExternalLink size={16} className="mr-2" />
                            {isSocialMedia ? `ÂÖÉ„ÅÆ${recipe.source_platform}„ÇíÈñã„Åè` : 'ÂÖÉ„ÅÆ„É¨„Ç∑„Éî„ÇíË¶ã„Çã'}
                        </Button>

                        <Button
                            variant="outline"
                            className="flex-1 border-red-200 text-red-600 hover:bg-red-50 hover:text-red-700"
                            onClick={openDeleteDialog}
                        >
                            <Trash size={16} className="mr-2" />
                            „ÇØ„É™„ÉÉ„Éó„ÅÆËß£Èô§
                        </Button>
                    </div>
                </div>
            </div>

            {/* È£ü‰∫ãË®òÈå≤ËøΩÂä†„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
            <AddToMealDialog
                isOpen={showMealDialog}
                onClose={handleCloseMealDialog}
                recipe={recipe}
            />

            {/* ÂâäÈô§Á¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
            {showDeleteDialog && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 w-full max-w-md">
                        <h3 className="text-xl font-semibold mb-4">„É¨„Ç∑„Éî„ÅÆ„ÇØ„É™„ÉÉ„Éó„ÇíËß£Èô§</h3>
                        <p className="mb-6">„Äå{recipe.title}„Äç„ÅÆ„ÇØ„É™„ÉÉ„Éó„ÇíËß£Èô§„Åó„Åæ„Åô„ÅãÔºü‰∏ÄÂ∫¶ÂâäÈô§„Åô„Çã„Å®ÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ</p>
                        <div className="flex justify-end gap-3">
                            <Button
                                variant="outline"
                                onClick={closeDeleteDialog}
                                disabled={loading}
                            >
                                „Ç≠„É£„É≥„Çª„É´
                            </Button>
                            <Button
                                variant="destructive"
                                onClick={handleDeleteRecipe}
                                disabled={loading}
                            >
                                {loading ? 'Âá¶ÁêÜ‰∏≠...' : 'ÂâäÈô§„Åô„Çã'}
                            </Button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
} 