---
description: manmaru - 妊婦向け栄養管理アプリ開発ガイドライン
globs: 
alwaysApply: false
---
### 1. 開発の基本方針
- **モバイルファースト**: すべてのUIコンポーネントはモバイル表示を最優先
- **シンプルな操作性**: 妊婦さんが疲れた状態でも簡単に操作できるUI設計
- **App Router採用**: Next.js 15.1.7のApp Routerを活用した最新のルーティング設計
- **型安全性**: TypeScriptによる厳格な型チェック

技術スタック：
- Next.js 15.1.7 (App Router)
- TypeScript
- shadcn/ui
- Supabase
- TailwindCSS

カラースキーム:
- shadcn/uiのbase color zinc (green基調)
- 使用しているshadcn/uiコンポーネント一覧
  -button
  -card
  -dialog
  -input
  -label

### 2. ディレクトリ構造
```
.
|-- README.md                          # プロジェクト概要と使用方法の説明
|-- check-env.js                       # 環境変数の検証スクリプト
|-- components.json                    # UIコンポーネント設定ファイル
|-- encode-image.js                    # 画像をBase64エンコードするユーティリティ
|-- encoded_image.txt                  # エンコードされた画像データの保存ファイル
|-- eslint.config.mjs                  # ESLint設定ファイル
|-- next-env.d.ts                      # Next.jsの型定義ファイル
|-- next.config.ts                     # Next.js設定ファイル
|-- package-lock.json                  # npm依存関係のロックファイル
|-- package.json                       # プロジェクト依存関係と設定
|-- postcss.config.mjs                 # PostCSS設定ファイル
|-- reports                            # 開発レポートディレクトリ
|   `-- 2025-2-26.md                   # 2025年2月26日の開発レポート
|-- src                                # ソースコードのルートディレクトリ
|   |-- app                            # Next.js App Routerのルートディレクトリ
|   |   |-- (authenticated)            # 認証が必要なページのグループ（URLには影響しない）
|   |   |   |-- dashboard              # ダッシュボードページ（栄養摂取状況の概要表示）
|   |   |   |   `-- page.tsx           # ダッシュボードのページコンポーネント
|   |   |   |-- home                   # ホームページ（ログイン後のメインページ）
|   |   |   |   `-- page.tsx           # ホームのページコンポーネント
|   |   |   |-- layout.tsx             # 認証済みページ共通のレイアウト（ナビゲーションなど）
|   |   |   |-- meals                  # 食事記録関連のページ
|   |   |   |   `-- log                # 食事ログページ
|   |   |   |       `-- page.tsx       # 食事ログのページコンポーネント
|   |   |   |-- profile                # プロフィール設定ページ（最近(authenticated)に移動）
|   |   |   |   `-- page.tsx           # プロフィール設定のページコンポーネント
|   |   |   |-- recipes                # レシピ一覧・詳細ページ（最近(authenticated)に移動）
|   |   |   |   |-- [id]               # 動的ルートによるレシピ詳細ページ
|   |   |   |   |   |-- page.tsx       # レシピ詳細のページコンポーネント
|   |   |   |   |   `-- recipes-client.tsx # レシピ詳細のクライアントコンポーネント
|   |   |   |   |-- page.tsx           # レシピ一覧のページコンポーネント
|   |   |   |   `-- recipes-client.tsx # レシピ一覧のクライアントコンポーネント
|   |   |   `-- settings               # アプリ設定ページ
|   |   |       `-- page.tsx           # 設定のページコンポーネント
|   |   |-- api                        # APIエンドポイントディレクトリ
|   |   |   |-- analyze-meal           # 食事画像分析API
|   |   |   |   `-- route.ts           # 食事画像からAIで栄養素を分析するAPI
|   |   |   |-- recommend-recipes      # レシピ推奨API
|   |   |   |   `-- route.ts           # 不足栄養素に基づくレシピ推奨API
|   |   |   `-- update-nutrition-log   # 栄養ログ更新API
|   |   |       `-- route.ts           # 日次の栄養摂取データを更新するAPI
|   |   |-- auth                       # 認証関連ページ
|   |   |   |-- callback               # OAuth認証コールバックページ
|   |   |   |   `-- page.tsx           # 認証後のリダイレクト処理
|   |   |   |-- login                  # ログインページ
|   |   |   |   `-- page.tsx           # ログインフォームのページ
|   |   |   `-- register               # ユーザー登録ページ
|   |   |       `-- page.tsx           # 登録フォームのページ
|   |   |-- favicon.ico                # サイトのファビコン
|   |   |-- globals.css                # グローバルCSSスタイル
|   |   |-- layout.tsx                 # アプリ全体のレイアウト
|   |   |-- page.tsx                   # ランディングページ（未ログイン時のトップページ）
|   |   `-- terms                      # 利用規約ページ
|   |       `-- page.tsx               # 利用規約のページコンポーネント
|   |-- components                     # 再利用可能なコンポーネント
|   |   |-- auth                       # 認証関連コンポーネント
|   |   |   |-- login-form.tsx         # ログインフォームコンポーネント
|   |   |   `-- register-form.tsx      # 登録フォームコンポーネント
|   |   |-- common                     # 共通コンポーネント
|   |   |   |-- bottom-nav.tsx         # 下部ナビゲーションバー
|   |   |   `-- header.tsx             # ヘッダーコンポーネント
|   |   |-- dashboard                  # ダッシュボード用コンポーネント
|   |   |   |-- meal-summary.tsx       # 食事サマリーコンポーネント
|   |   |   `-- nutrition-chart.tsx    # 栄養摂取チャートコンポーネント
|   |   |-- home                       # ホーム画面用コンポーネント
|   |   |   |-- daily-record-card.tsx  # 日次記録カード
|   |   |   |-- home-client.tsx        # ホーム画面のクライアントコンポーネント
|   |   |   |-- nutrition-summary.tsx  # 栄養摂取サマリー
|   |   |   |-- progress-card.tsx      # 進捗カード
|   |   |   `-- recipe-preview.tsx     # レシピプレビュー
|   |   |-- layout                     # レイアウト関連コンポーネント
|   |   |   `-- bottom-navigation.tsx  # 下部ナビゲーション（モバイル用）
|   |   |-- meals                      # 食事関連コンポーネント
|   |   |   |-- meal-card.tsx          # 食事カードコンポーネント
|   |   |   `-- meal-input.tsx         # 食事入力フォーム
|   |   |-- recipes                    # レシピ関連コンポーネント
|   |   |   `-- recipe-card.tsx        # レシピカードコンポーネント
|   |   `-- ui                         # 基本UIコンポーネント
|   |       |-- button.tsx             # ボタンコンポーネント
|   |       |-- card.tsx               # カードコンポーネント
|   |       |-- dialog.tsx             # ダイアログコンポーネント
|   |       |-- input.tsx              # 入力フィールドコンポーネント
|   |       `-- label.tsx              # ラベルコンポーネント
|   |-- data                           # 静的データファイル
|   |   `-- nutrition_data.json        # 食品の栄養データ
|   |-- hooks                          # カスタムReactフック
|   |   |-- useAuth.ts                 # 認証関連フック
|   |   |-- useMeals.ts                # 食事データ操作フック
|   |   `-- useNutrition.ts            # 栄養データ操作フック
|   |-- lib                            # ユーティリティライブラリ
|   |   |-- api.ts                     # API呼び出し関数
|   |   |-- config                     # 設定ファイル
|   |   |   `-- env.ts                 # 環境変数の型安全な取得
|   |   |-- langchain                  # LangChain関連（AI処理）
|   |   |   `-- langchain.ts           # Gemini APIとの連携設定
|   |   |-- nutrition                  # 栄養関連ユーティリティ
|   |   |   `-- nutritionUtils.ts      # 栄養計算ユーティリティ
|   |   |-- supabase                   # Supabase関連
|   |   |   |-- client.ts              # Supabaseクライアント設定
|   |   |   `-- types.ts               # Supabaseデータの型定義
|   |   |-- types                      # 型定義
|   |   |   `-- nutrition.ts           # 栄養関連の型定義
|   |   |-- utils                      # 一般ユーティリティ
|   |   |   |-- date.ts                # 日付操作ユーティリティ
|   |   |   |-- nutrition.ts           # 栄養計算ユーティリティ
|   |   |   `-- profile.ts             # プロフィール関連ユーティリティ
|   |   `-- utils.ts                   # 汎用ユーティリティ関数
|   |-- middleware.ts                  # Next.js ミドルウェア（認証チェックなど）
|   |-- scripts                        # スクリプトファイル
|   |   `-- api-test.js                # API テスト用スクリプト
|   `-- types                          # グローバル型定義
|       |-- meal.ts                    # 食事データの型定義
|       |-- nutrition.ts               # 栄養データの型定義
|       `-- user.ts                    # ユーザーデータの型定義
|-- tailwind.config.ts                 # Tailwind CSS設定
|-- test-api-direct.js                 # API直接テスト用スクリプト
|-- test-api.js                        # 食事分析APIテスト用スクリプト
|-- test-nutrition-api.js              # 栄養ログ更新APIテスト用スクリプト
|-- test-recipe-api.js                 # レシピ推奨APIテスト用スクリプト
`-- tsconfig.json                      # TypeScript設定ファイル
```

### 3. コンポーネント設計方針
#### 3.1 認証関連（auth/）
- ログイン/登録フォームは最小限の入力項目
- Supabase Authを活用したシンプルな認証フロー
- エラーメッセージは分かりやすい日本語で表示

#### 3.2 食事記録（meals/）
- カメラ/写真アップロード機能を優先実装
- 食事記録の手動修正UIを分かりやすく
- オフライン対応を考慮したデータ保存

#### 3.3 ダッシュボード（dashboard/）
- 重要な栄養情報を一目で把握できるグラフ表示
- 色分けによる直感的な過不足表示
- レスポンシブな表示対応

### 4. AI機能実装のベストプラクティス
- **画像解析**: 
  - 撮影→解析→結果表示の流れをスムーズに
  - エラー時は手動入力へのフォールバック実装
- **栄養アドバイス**:
  - 専門用語を避けた分かりやすい文言
  - 妊娠週数に応じた適切なアドバイス

### 5. PWA対応指針
- **最優先**
　- manifest.json と icons を用意し、ホーム画面追加ができるようにする。
　- next-pwaなどで最低限のキャッシュを有効化（デフォルト設定でも十分）。
- **余裕があれば**
　- 特定パスや特定ファイルだけはオフラインキャッシュするルールを設定。
　- たとえば「トップページやメインのJS/CSSはキャッシュするが、食事画像のアップロード機能はオンライン必須」など。
- **プッシュ通知**
　- 2週間MVPでは優先度低め。実装のためのService Workerのコードが増え、デバッグも必要。


### 6. コーディング規約
#### 6.1 命名規則
- コンポーネント: PascalCase（例: `MealCard`）
- フック: camelCaseで`use`プレフィックス（例: `useMealLog`）
- 関数: camelCase（例: `calculateNutrition`）


### 7. エラーハンドリング
- ユーザーエラーは日本語で分かりやすく表示
- AI解析エラーは手動入力への切り替えを提案
- ネットワークエラーはオフラインモードを活用

### 8. パフォーマンス最適化
- 画像アップロードは圧縮して転送
- APIレスポンスは適切にキャッシュ
- 不要な再レンダリングを防ぐmemo化

### 9. セキュリティ考慮事項
- Supabase RLSによるデータアクセス制御
- センシティブなデータの暗号化
- JWT認証トークンの適切な管理

### 10. テスト方針
- クリティカルなフローの単体テスト
- 画像解析機能の統合テスト
- モバイル表示のビジュアルレグレッションテスト

### コードレビューのチェックポイント
1. モバイル表示は適切か
2. エラーハンドリングは親切か
3. オフライン動作は考慮されているか
4. パフォーマンスへの影響は最小限か
5. TypeScriptの型は適切か